Description: Deploy a static website

Parameters:
    RootDomainName:
        Description: Domain name for the website (hidivelab.org)
        Type: String
    HostedZoneId:
        Description: Hosted Zone ID
        Type: String
    
  

Resources:
    # Two buckets are created for website hosting - the RootBucket hosts the content,
    # The Logging bucket hosts the access logs.
    RootBucket:
        Type: AWS::S3::Bucket
        DeletionPolicy: Retain
        Properties:
            BucketName: !Ref RootDomainName
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
            LoggingConfiguration:
                DestinationBucketName: !Ref LoggingBucket
                LogFilePrefix: !Sub
                    - ${Domain}-logs
                    - Domain: !Ref RootDomainName
            Tags:
                - Key: Environment
                  Value: Production
                - Key: Owner
                  Value: hidive@hms.harvard.edu
                - Key: Name
                  Value: !Ref RootDomainName

    LoggingBucket:
        Type: AWS::S3::Bucket
        Properties:
            AccessControl: Private
            BucketEncryption:
                ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
            BucketName: !Sub
                - logs.${Domain}
                - Domain: !Ref RootDomainName
            LifecycleConfiguration:
                Rules:
                    - ExpirationInDays: 90
                      Status: Enabled
            OwnershipControls:
                Rules:
                - ObjectOwnership: BucketOwnerPreferred
            PublicAccessBlockConfiguration:
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true           

    RootBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            Bucket: !Ref RootBucket
            PolicyDocument:
                Id: CFOAIForGetBucketObjects
                Version: 2012-10-17
                Statement:
                - Action: 's3:GetObject'
                  Effect: Allow
                  Principal: 
                    CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
                  Resource: !Join 
                        - ''
                        - - 'arn:aws:s3:::'
                          - !Ref RootBucket
                          - /*

    LogBucketPolicy:
        Type: 'AWS::S3::BucketPolicy'
        Properties:
            Bucket: !Ref LoggingBucket
            PolicyDocument:
                Version: 2012-10-17
                Statement:
                    -   Action: 's3:PutObject'
                        Effect: Allow
                        Principal:
                            Service: logging.s3.amazonaws.com
                        Resource: !Join 
                            - ''
                            - - 'arn:aws:s3:::'
                              - !Ref LoggingBucket
                              - /s3/*
                        Condition:
                            ArnLike:
                                'aws:SourceArn': !GetAtt 
                                - RootBucket
                                - Arn
                            StringEquals:
                                'aws:SourceAccount': !Sub '${AWS::AccountId}'

    #
    CertificateManagerCertificate:
        Type: AWS::CertificateManager::Certificate
        Properties:
            # naked domain
            DomainName: !Ref RootDomainName
            # add www to certificate
            SubjectAlternativeNames:
                - !Sub 'www.${RootDomainName}'
            ValidationMethod: DNS
            DomainValidationOptions:
                # DNS record for the naked domain
                - DomainName: !Ref RootDomainName
                  HostedZoneId: !Ref HostedZoneId
                # DNS record for the www domain
                - DomainName: !Sub 'www.${RootDomainName}'
                  HostedZoneId: !Ref HostedZoneId
    #
    CloudFrontDistribution:
        Type: AWS::CloudFront::Distribution
        Properties:
            DistributionConfig:
                Aliases:
                    - !Ref RootDomainName
                    - !Sub 'www.${RootDomainName}'
                CustomErrorResponses:
                    - ErrorCachingMinTTL: 60
                      ErrorCode: 404
                      ResponseCode: 404
                      ResponsePagePath: '/404.html'
                DefaultCacheBehavior:
                    AllowedMethods:
                        - GET
                        - HEAD
                    CachedMethods:
                        - GET
                        - HEAD
                    Compress: true
                    DefaultTTL: 86400
                    ForwardedValues:
                        Cookies:
                            Forward: none
                        QueryString: true
                    SmoothStreaming: false
                    TargetOriginId: !Ref RootBucket
                    ViewerProtocolPolicy: 'allow-all'
                    ResponseHeadersPolicyId: e61eb60c-9c35-4d20-a928-2b84e02af89c 
                    CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized managed policy
                    FunctionAssociations:
                    - EventType: viewer-request
                      FunctionARN: !GetAtt CloudFrontFunction.FunctionMetadata.FunctionARN
                DefaultRootObject: 'index.html'
                Enabled: true
                HttpVersion: http2
                IPV6Enabled: true
                Logging:
                    Bucket: !GetAtt LoggingBucket.DomainName
                    IncludeCookies: false
                    Prefix: cdn/
                Origins:
                    - DomainName: !Join ['', [!Ref RootBucket, '.s3.amazonaws.com']]
                      Id: !Ref RootBucket
                      S3OriginConfig:
                        OriginAccessIdentity:
                            !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
                PriceClass: PriceClass_ALL
                ViewerCertificate:
                    AcmCertificateArn: !Ref CertificateManagerCertificate
                    MinimumProtocolVersion: TLSv1.2_2021
                    SslSupportMethod: sni-only
            Tags:
                - Key: Domain
                  Value: !Ref RootDomainName

    CloudFrontOriginAccessIdentity:
        Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
        Properties:
            CloudFrontOriginAccessIdentityConfig:
                Comment: !Sub 'CloudFront OAI for www.${RootDomainName}'


    # The record sets map your domain name to Amazon S3 endpoints.
    Route53RecordSetGroup:
        Type: AWS::Route53::RecordSetGroup
        Properties:
            # keep the . suffix
            HostedZoneName: !Sub '${RootDomainName}.'
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html#cfn-route53-aliastarget-hostedzoneid
            HostedZoneName: !Sub 
                - ${Domain}.
                - Domain: !Ref RootDomainName
            Comment: Zone apex alias.
            RecordSets:
                - Name: !Ref RootDomainName
                  Type: A
                  AliasTarget:
                      DNSName: !GetAtt CloudFrontDistribution.DomainName
                      EvaluateTargetHealth: false
                      HostedZoneId: Z2FDTNDATAQYW2 # leave hardcoded, don't confuse w/ !Ref HostedZoneId
                - Name: !Sub 'www.${RootDomainName}'
                  Type: A
                  AliasTarget:
                      DNSName: !GetAtt CloudFrontDistribution.DomainName
                      EvaluateTargetHealth: false
                      HostedZoneId: Z2FDTNDATAQYW2 # leave hardcoded, don't confuse w/ !Ref HostedZoneId

    # This function replicates the Amazon S3 behavior that directs any request that lacks a filename to index.html,
    # regardless of whether it's for the root of a website or a subfolder.
    # https://github.com/aws-samples/amazon-cloudfront-functions/tree/main/url-rewrite-single-page-apps
    CloudFrontFunction:
        Type: AWS::CloudFront::Function
        Properties:
            AutoPublish: true
            Name: add-index_html
            FunctionCode: !Sub |
                function handler(event) {
                    var request = event.request;
                    var uri = request.uri;

                    // Check whether the URI is missing a file name.
                    if (uri.endsWith('/')) {
                        request.uri += 'index.html';
                    }
                    // Check whether the URI is missing a file extension.
                    else if (!uri.includes('.')) {
                        request.uri += '/index.html';
                    }

                    return request;
                }
            FunctionConfig:
                Comment: Add index.html to request URLs that do not include a file name
                Runtime: cloudfront-js-1.0


Outputs:
    CloudFrontDistribution:
        Description: CloudFront distribution
        Value: !Ref CloudFrontDistribution
    CertificateArn:
        Description: Issued certificate
        Value: !Ref CertificateManagerCertificate  
    RootDomainBucket:
        Description: Website bucket
        Value: !Ref RootBucket
    RootDomainBucketArn:
        Description: Website bucket locator
        Value: !GetAtt RootBucket.Arn
    S3BucketBucketLogs:
        Description: Logging bucket
        Value: !Ref LoggingBucket
    S3BucketBucketLogsArn:
        Description: Logging bucket
        Value: !GetAtt LoggingBucket.Arn
